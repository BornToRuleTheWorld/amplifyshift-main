"""
Django settings for amplifyshit project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-tw_o#=^v70r^-a&pvoh5g4175uqgg$k9ur#(w+74ux67&(@$2j'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', "").split(',') if os.getenv('ALLOWED_HOSTS') else []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Project apps
    'professional',
    'modules',
    'facility',
    'facility_group',
    'jobs',
    'job_request',
    'job_request_messages',
    'administrator',
    'contract',
    'contract_messages',
    'membership',
    'invoices',
    
    # Third party apps
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'anymail',
    'auditlog',
    'colorfield',
    'phonenumber_field',
    'django_celery_results',
    'django_mysql',
    'django_rq',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'amplifyshift.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR,'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'amplifyshift.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE', 'django.db.backends.mysql'),
        'NAME': os.getenv('DB_NAME', 'amplifyshift'),
        'USER': os.getenv('DB_USER', 'root'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'admin123'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '3306'),
        'OPTIONS': {
            'charset': 'utf8mb4',
            'use_unicode': True,
        },
    }
}


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

#---sqlite----#
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


#---Mysql---#
DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE'), 
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#Corsheaders
CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
]

CORS_ALLOW_ALL_ORIGINS = True

#Media
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

#Email settings
ENABLE_MAILGUN = os.getenv('ENABLE_MAILGUN', 'false').lower() == "true"
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', '')
SERVER_EMAIL = os.getenv('SERVER_EMAIL', '')

if ENABLE_MAILGUN:

    ANYMAIL = {
        "MAILGUN_API_KEY": os.getenv('MAILGUN_API_KEY', ''),
        "MAILGUN_SENDER_DOMAIN": os.getenv('MAILGUN_SENDER_DOMAIN', '')
    }

    EMAIL_BACKEND = os.getenv('MAILGUN_EMAIL_BACKEND', '')

else:
    
    EMAIL_BACKEND       = os.getenv('EMAIL_BACKEND')
    EMAIL_HOST          = os.getenv('EMAIL_HOST')
    EMAIL_PORT          = os.getenv('EMAIL_PORT')
    EMAIL_USE_TLS       = os.getenv('EMAIL_USE_TLS')
    EMAIL_HOST_USER     = os.getenv('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')

#Frontend url
FRONTEND_URL = os.getenv("FRONTEND_URL", "http://localhost:3000")

#Auditlog settings
AUDITLOG_INCLUDE_ALL_MODELS=True

#RQ settings
REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost:6379/1')

RQ_QUEUES = {
    'default': {
        'URL': REDIS_URL,
    },
    'send_mail': {
        'URL': REDIS_URL,
    },
}

RQ_SHOW_ADMIN_LINK = True


#Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': os.getenv('LOG_FILE', os.path.join(BASE_DIR, 'logs', 'error.log')),
        },
    },
    'loggers': {
        'mail': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}

